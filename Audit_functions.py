{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad30fe77-307c-44bc-9a6e-48bd900866a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from xml.etree import cElementTree as ET\n",
    "from collections import defaultdict\n",
    "import pprint\n",
    "import re\n",
    "# Import BeautifulSoup\n",
    "from bs4 import BeautifulSoup as bs\n",
    "\n",
    "\n",
    "data = []\n",
    "# Read the XML file\n",
    "with open(\"sample2.osm\", \"r\", encoding=\"utf8\") as file:\n",
    "    # Read each line in the file, readlines() returns a list of lines\n",
    "    data = file.readlines()\n",
    "    # Combine the lines in the list into a string\n",
    "    data = \"\".join(data)\n",
    "    soup = bs(data, \"lxml\")\n",
    "\n",
    "\n",
    "file_name = 'sample2.osm'\n",
    "doc_path = os.path.join(file_name)\n",
    "file_path = os.path.abspath(os.path.join(file_name))\n",
    "osm_file = open(\"sample2.osm\", encoding=\"utf8\")\n",
    "street_type_re = re.compile(r'\\S+\\.?$', re.IGNORECASE)\n",
    "street_typesw = defaultdict(set)\n",
    "street_types = defaultdict(int)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def basic_audit_street_type(street_types, street_name):\n",
    "    m = street_type_re.search(street_name)\n",
    "    if m:\n",
    "        street_type = m.group()\n",
    "\n",
    "        street_types[street_type] += 1\n",
    "\n",
    "\n",
    "#def audit_street_type(street_types, street_name):\n",
    "#    m = street_type_re.search(street_name)\n",
    "#    if m:\n",
    "#        street_type = m.group()\n",
    "#        if street_type not in expected:\n",
    "#            street_types[street_type].add(street_name)\n",
    "# Looks at the expected list, and returns a dictionary of names that does not match the expected list appove. \n",
    "\n",
    "def print_sorted_dict(d):\n",
    "    keys = d.keys()\n",
    "    keys = sorted(keys, key=lambda s: s.lower())\n",
    "    for k in keys:\n",
    "        v = d[k]\n",
    "        print(\"%s: %d\" % (k, v)) \n",
    "def is_street_name(elem):\n",
    "    return (elem.tag == \"tag\") and (elem.attrib['k'] == \"addr:street\")\n",
    "\n",
    "def basic_audit_street_type(street_types, street_name):\n",
    "    m = street_type_re.search(street_name)\n",
    "    if m:\n",
    "        street_type = m.group()\n",
    "\n",
    "        street_types[street_type] += 1\n",
    "# This function will show us what different names streets in Reno have been given.\n",
    "\n",
    "def audit():\n",
    "    for event, elem in ET.iterparse(osm_file):\n",
    "        if is_street_name(elem):\n",
    "            basic_audit_street_type(street_types, elem.attrib['v'])    \n",
    "    print_sorted_dict(street_types)\n",
    "\n",
    "\n",
    "\n",
    "file_name = 'sample2.osm'\n",
    "def find_pc_k(elem):\n",
    "    return (elem.attrib['k'] =='addr:postcode')\n",
    "       # will show all postal codes in the data set.\n",
    "\n",
    "def find_tags():\n",
    "    for event, elem in ET.iterparse(file_name, events =(\"start\",)):\n",
    "        if elem.tag =='node':\n",
    "            for tag in elem.iter('tag'):\n",
    "                  if find_pc_k(tag):\n",
    "                    print(tag.attrib['k'], tag.attrib['v'])\n",
    "                    #return tag.attrib['k'], tag.attrib['v']\n",
    "\n",
    "                \n",
    "if __name__ == '__main__':\n",
    "    audit()   \n",
    "    find_tags()\n",
    "    \n",
    ";\n",
    "\n",
    "\n",
    "zipcode = [] #empty array to store all zip_codes\n",
    "post_C = soup.find_all(\"tag\", {\"k\": \"addr:postcode\"})\n",
    "\n",
    "for code in post_C:\n",
    "    zipcode.append(code)\n",
    "#using beautiful soup to find tags with incorrect zipcodes\n",
    "\n",
    "#print(zipcode) #printed the zipcodes to ensure they all printed from the entire dataset.\n",
    "\n",
    "#removing all unwanted zipcodes from our data:\n",
    "unwanted_codes = soup.find_all(\"tag\", {\"k\": \"addr:postcode\"} and {\"v\": \"89434\"})\n",
    "for x in unwanted_codes:\n",
    "    zipcode.remove(x)\n",
    "\n",
    "    next_code = soup.find_all(\"tag\", {\"k\": \"addr:postcode\"} and {\"v\":\"89431\"})   \n",
    "for a in next_code:\n",
    "    zipcode.remove(a)\n",
    "    \n",
    "bad_zip = soup.find_all(\"tag\", {\"k\": \"addr:postcode\"}and {\"v\":\"89432\"})\n",
    "for b in bad_zip:\n",
    "    zipcode.remove(b)\n",
    "\n",
    "sp_zip = soup.find_all(\"tag\", {\"k\": \"addr:postcode\"}and {\"v\":\"89435\"})\n",
    "for c in sp_zip:\n",
    "    zipcode.remove(c)\n",
    "    \n",
    "sp_zip2 = soup.find_all(\"tag\", {\"k\": \"addr:postcode\"}and {\"v\":\"89436\"})\n",
    "for d in sp_zip2:\n",
    "    zipcode.remove(d)\n",
    "\n",
    "unknown_zip = soup.find_all(\"tag\", {\"k\": \"addr:postcode\"}and {\"v\":\"96118\"})\n",
    "for u in unknown_zip:\n",
    "    zipcode.remove(u)\n",
    "\n",
    "#for x in zipcode:\n",
    "#    print(x) # Zipcode now only holds the correct zip codes. Another print to ensure all unwated zipcodes were gone.\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
